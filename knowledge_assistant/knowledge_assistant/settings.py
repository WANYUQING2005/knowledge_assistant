"""
Django settings for knowledge_assistant project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os  # 添加此行导入os模块
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')  # 文件存储根目录


# 可选：配置文件大小限制
DATA_UPLOAD_MAX_MEMORY_SIZE = 10485760  # 10MB
FILE_UPLOAD_MAX_MEMORY_SIZE = 10485760

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-sbw*r710jz-31t(h8-^udife*rnndj^=n0+epahe5l5$h8eb_r'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'account',  # 新增account app
    'knowledge',  # 新增knowledge app
    'chat',  # 新增chat app
     # 第三方应用
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',
    'drf_spectacular',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # 添加在最顶部
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# 开发环境允许所有跨域请求
CORS_ALLOW_ALL_ORIGINS = True  # 仅用于开发环境
ROOT_URLCONF = 'knowledge_assistant.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'knowledge_assistant.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
     'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'kb',  # 替换为你的数据库名
        'USER': 'root',  # 替换为MySQL用户名
        'PASSWORD': '000524',  # 替换为MySQL密码
        'HOST': 'localhost',  # 数据库主机，本地数据库保持默认
        'PORT': '3306',  # MySQL默认端口
        'OPTIONS': {
            'charset': 'utf8mb4',
            'use_unicode': True,
        },
        'TEST': {
            'NAME': 'test_knowledge_assistant',  # 测试专用数据库名
            # 保持与主数据库相同的引擎和连接设置
        }
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
# 修正自定义用户模型配置（改为大写）
AUTH_USER_MODEL = 'account.User'
# 修正自定义用户模型配置（改为大写）
AUTH_PROFILE_MODEL = 'account.Profile'
# 添加支持的文件类型配置
SUPPORTED_FILE_TYPES = [
    'txt', 'markdown', 'pdf', 'ppt', 'docx', 
    'cpp', 'java', 'py', 'jpg', 'png', 'xlsx'
]
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
}

# RAG 服务配置（可用环境变量覆盖）
RAG_DEMO_BASE_URL = os.getenv("RAG_DEMO_BASE_URL", "http://127.0.0.1:8001")
RAG_DEMO_CHAT_PATH = os.getenv("RAG_DEMO_CHAT_PATH", "/api/qa")  # 你的 rag_demo 聊天/问答接口路径
RAG_DEMO_TIMEOUT = int(os.getenv("RAG_DEMO_TIMEOUT", "15"))      # 秒
RAG_DEMO_RETRIES = int(os.getenv("RAG_DEMO_RETRIES", "0"))       # 简单重试次数（0 表示不重试）
