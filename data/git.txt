与生活中许多伟大的事物一样，Git 的诞生也伴随着一些创造性的破坏和激烈的争议。
Linux 内核是一个范围相当大的开源软件项目。在 Linux 内核维护的早期（1991–2002 年），软件的更改通过补丁和归档文件的形式传播。2002 年，Linux 内核项目开始使用一个名为 BitKeeper 的专有 DVCS。
2005 年，Linux 内核开发社区与开发 BitKeeper 的商业公司之间的关系破裂，该工具的免费使用权被撤销。这促使 Linux 开发社区（特别是 Linux 的创建者 Linus Torvalds）根据他们在使用 BitKeeper 时学到的一些经验教训，开发自己的工具。新系统的一些目标如下：
自 2005 年诞生以来，Git 已经发展成熟，易于使用，但仍保留了这些最初的优点。它速度惊人，对大型项目非常高效，并且拥有一个令人难以置信的非线性开发分支系统（参见Git 分支）。

什么是 Git？
那么，简单来说 Git 是什么？这是一个需要吸收的重要章节，因为如果你理解了 Git 是什么以及它是如何工作的基本原理，那么有效使用 Git 可能会对你来说容易得多。在学习 Git 时，尽量抛开你可能了解的其他版本控制系统（如 CVS、Subversion 或 Perforce）的知识——这样做将有助于你避免在使用该工具时产生细微的混淆。尽管 Git 的用户界面与其他这些版本控制系统相当相似，但 Git 存储和思考信息的方式却大相径庭，理解这些差异将有助于你在使用它时避免感到困惑。
快照，而非差异。Git 与任何其他版本控制系统（包括 Subversion 及其“朋友们”）之间的主要区别在于 Git 思考其数据的方式。从概念上讲，大多数其他系统将信息存储为基于文件的更改列表。这些其他系统（CVS、Subversion、Perforce 等）将其存储的信息视为一组文件以及随着时间推移对每个文件所做的更改（这通常被称为基于增量的版本控制）。
